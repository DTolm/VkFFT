// This file is part of VkFFT, a Vulkan Fast Fourier Transform library
//
// Copyright (C) 2020 Dmitrii Tolmachev <dtolm96@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/. 
#version 450
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_ARB_gpu_shader_int64 : enable

const double M_PI = 3.1415926535897932384626433832795LF;
const double M_SQRT1_2 = 0.70710678118654752440084436210485LF;
const double M_2_PI = 0.63661977236758134307553505349006LF;
const double M_PI_2 = 1.5707963267948966192313216916398LF;
dvec2 sincos_20(double x)
{
    //minimax coefs for sin for 0..pi/2 range
	const double a1 = 0.99999999999999999999681147116561181LF;
	const double a3 = -0.166666666666666666571856325288079038LF;
    const double a5 =  0.00833333333333333250293838029678134938LF;
    const double a7 = -0.000198412698412695077448705835001537767LF;
    const double a9 =  2.75573192239122489926321745222406046e-6LF;
    const double a11 = -2.50521083756661002556381165026219477e-8LF;
	const double a13 = 1.60590430232481300901501731427622871e-10LF;
	const double a15 = -7.64712095757368360494490720934726969e-13LF;
	const double a17 = 2.81007710494804045581937928846346559e-15LF;
	const double ab = -7.970793758390793011296801848868938e-18LF;
    double y = abs(x * M_2_PI);
    double q = floor(y);
    int quadrant = int(q);
    double t = (quadrant & 1) != 0 ? 1 - y + q : y - q;
    t *= M_PI_2;
    double t2 = t * t;
    double r = fma(fma(fma(fma(fma(fma(fma(fma(fma(ab, t2, a17), t2, a15), t2, a13), t2, a11), t2, a9), t2, a7), t2, a5), t2, a3), t2*t, t);
	dvec2 cos_sin;
	cos_sin.x=((quadrant == 0)||(quadrant == 3)) ? sqrt(1-r*r) : -sqrt(1-r*r);
	r = x < 0 ? -r : r;
	cos_sin.y=(quadrant & 2) != 0 ? -r : r;
    return cos_sin;
}


layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;// 32, fft/8, 1: total <1024
layout (constant_id = 4) const uint fft_dim = 2048;
layout (constant_id = 5) const bool inverse = false;
layout (constant_id = 6) const bool zeropad_0 = false;
layout (constant_id = 7) const bool zeropad_1 = false;
layout (constant_id = 8) const uint inputStride_0 = 1;
layout (constant_id = 9) const uint inputStride_1 = 1;
layout (constant_id = 10) const uint inputStride_2 = 1;
layout (constant_id = 11) const uint inputStride_3 = 1;
layout (constant_id = 12) const uint inputStride_4 = 1;
layout (constant_id = 13) const uint outputStride_0 = 1;
layout (constant_id = 14) const uint outputStride_1 = 1;
layout (constant_id = 15) const uint outputStride_2 = 1;
layout (constant_id = 16) const uint outputStride_3 = 1;
layout (constant_id = 17) const uint outputStride_4 = 1;
layout (constant_id = 18) const uint fft_dim_full = 2048;
layout (constant_id = 19) const uint stageStartSize = 2048;
layout (constant_id = 20) const uint firstStageStartSize = 2048;
layout (constant_id = 21) const uint fft_dim_x = 2048;
layout (constant_id = 22) const uint numStages = 1;
layout (constant_id = 23) const uint stageRadix_0 = 8;
layout (constant_id = 24) const uint stageRadix_1 = 8;
layout (constant_id = 25) const uint inputOffset = 0;
layout (constant_id = 26) const uint outputOffset = 0;
layout (constant_id = 27) const bool reorderFourStep = false;
layout (constant_id = 28) const uint performWorkGroupShiftX = 0;
layout (constant_id = 29) const uint performWorkGroupShiftY = 0;
layout (constant_id = 30) const uint performWorkGroupShiftZ = 0;
layout (constant_id = 31) const uint inputBufferBlockNum = 1;
layout (constant_id = 32) const uint inputBufferBlockSize = 1;
layout (constant_id = 33) const uint outputBufferBlockNum = 1;
layout (constant_id = 34) const uint outputBufferBlockSize = 1;
layout (constant_id = 35) const uint kernelBlockNum = 1;
layout (constant_id = 36) const uint kernelBlockSize = 1;
const uint radixStride_0 = fft_dim/2;
const uint radixStride_1 = fft_dim/4;
const uint radixStride_2 = fft_dim/8;

layout(push_constant) uniform PushConsts
{
	uint coordinate;
	uint batchID;
	uint workGroupShiftX;
	uint workGroupShiftY;
	uint workGroupShiftZ;
} consts;
layout(std430, binding = 0) buffer Data {
    dvec2 inputs[inputBufferBlockSize];
} inputBlocks[inputBufferBlockNum];

layout(std430, binding = 1) buffer Data2 {
    dvec2 outputs[outputBufferBlockSize];
} outputBlocks[outputBufferBlockNum];


uint indexInput(uint index_x) {
    return inputOffset+index_x* inputStride_0 + (gl_WorkGroupID.y + consts.workGroupShiftY*performWorkGroupShiftY)* inputStride_1 + (gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z)* inputStride_2 + consts.coordinate * inputStride_3  + consts.batchID * inputStride_4;
}
uint indexOutput(uint index_x) {
    return outputOffset+index_x* outputStride_0 + (gl_WorkGroupID.y + consts.workGroupShiftY*performWorkGroupShiftY)* outputStride_1 + (gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z)* outputStride_2 + consts.coordinate * outputStride_3 + consts.batchID * outputStride_4;
}

void radix2(inout dvec2 values[2], double angle) {
    dvec2 temp;
	dvec2 w=sincos_20(angle);
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
}

void radix4(inout dvec2 values[4], double angle) {
	
	//DIF 1st stage with double angle
	dvec2 temp;
	dvec2 w=sincos_20(angle);
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	//DIF 2nd stage with angle
	w=normalize(w + dvec2(1.0, 0.0));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	w = (inverse) ? dvec2(w.y, -w.x) : dvec2(-w.y, w.x);

	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp = values[1];
	values[1]=values[2];
	values[2]=temp;
}

void radix8(inout dvec2 values[8], double angle) {
	//DIF 1st stage with quadruple angle
	
	dvec2 temp; 
	dvec2 w=sincos_20(angle);
	temp.x=values[4].x*w.x-values[4].y*w.y;
	temp.y=values[4].y*w.x+values[4].x*w.y;
	values[4]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[5].x*w.x-values[5].y*w.y;
	temp.y=values[5].y*w.x+values[5].x*w.y;
	values[5]=values[1]-temp;
	values[1]=values[1]+temp;
	
	temp.x=values[6].x*w.x-values[6].y*w.y;
	temp.y=values[6].y*w.x+values[6].x*w.y;
	values[6]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[3]-temp;
	values[3]=values[3]+temp;
	
	//DIF 2nd stage with double angle
	w=normalize(w + dvec2(1.0, 0.0));
	
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	dvec2 iw = (inverse) ? dvec2(w.y, -w.x) : dvec2(-w.y, w.x);
    
	temp.x=values[6].x*iw.x-values[6].y*iw.y;
	temp.y=values[6].y*iw.x+values[6].x*iw.y;
	values[6]=values[4]-temp;
	values[4]=values[4]+temp;
	
	temp.x=values[7].x*iw.x-values[7].y*iw.y;
	temp.y=values[7].y*iw.x+values[7].x*iw.y;
	values[7]=values[5]-temp;
	values[5]=values[5]+temp;
	
	//DIF 3rd stage with angle
	w=normalize(w + dvec2(1.0, 0.0));;
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	iw = (inverse) ? dvec2(w.y, -w.x) : dvec2(-w.y, w.x);
	
	temp.x=values[3].x*iw.x-values[3].y*iw.y;
	temp.y=values[3].y*iw.x+values[3].x*iw.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	iw.x=(inverse) ? w.x*M_SQRT1_2+w.y*M_SQRT1_2 : w.x*M_SQRT1_2-w.y*M_SQRT1_2;
	iw.y=(inverse) ? w.y*M_SQRT1_2-w.x*M_SQRT1_2 : w.y*M_SQRT1_2+w.x*M_SQRT1_2;
   
	temp.x=values[5].x*iw.x-values[5].y*iw.y;
	temp.y=values[5].y*iw.x+values[5].x*iw.y;
	values[5]=values[4]-temp;
	values[4]=values[4]+temp;
	
	w = (inverse) ? dvec2(iw.y, -iw.x) : dvec2(-iw.y, iw.x);
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[6]-temp;
	values[6]=values[6]+temp;
	
	temp = values[1];
	values[1]=values[4];
	values[4]=temp;
	
	temp = values[3];
	values[3]=values[6];
	values[6]=temp;

}

shared dvec2 sdata[gl_WorkGroupSize.x*fft_dim];// coalesced memory x (fft_dim/8) threads

void main() {

	//combine up to 16 ffts to avoid strided reads - here in 2nd and later passes of 1d FFT along x axis.
	if ((zeropad_0)&&(!inverse)){
		if(fft_dim==fft_dim_full){
			for (uint i=0; i < 4; i++){
				uint inputID = indexInput((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize) + stageStartSize*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y)+((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)/stageStartSize)*(stageStartSize*fft_dim));
				if(inputBufferBlockNum==1)
					sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = inputBlocks[0].inputs[inputID];
				else
					sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize];
			}for (uint i=4; i < 8; i++)
				sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = dvec2(0,0);
		}else{
			for (uint i=0; i < 8; i++){
				uint inputID = (gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize) + stageStartSize*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y)+((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)/stageStartSize)*(stageStartSize*fft_dim);
				if(inputID%fft_dim_full<fft_dim_full/2)
				{
					if(inputBufferBlockNum==1)
						sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = inputBlocks[0].inputs[indexInput(inputID)];
					else
						sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = inputBlocks[indexInput(inputID)/inputBufferBlockSize].inputs[indexInput(inputID)%inputBufferBlockSize];
				}else
					sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = dvec2(0,0);
			}
		}
	} else {
		for (uint i=0; i < 8; i++){
			uint inputID = indexInput((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize) + stageStartSize*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y)+((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)/stageStartSize)*(stageStartSize*fft_dim));
			if(inputBufferBlockNum==1)
				sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = inputBlocks[0].inputs[inputID];
			else
				sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))] = inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize];
		}
	}

	memoryBarrierShared();
	barrier();
	
	dvec2 temp[8];
	uint stageSize=1;

	if ((!reorderFourStep) && (inverse)){
		
		for (uint i=0; i < 8; i++){
			double angle=2*M_PI*((((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize))*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))/double(stageStartSize*fft_dim));
			uint index=(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y));
			dvec2 mult = sincos_20(-angle);
			dvec2 res=dvec2(sdata[index].x*mult.x-sdata[index].y*mult.y,sdata[index].y*mult.x+sdata[index].x*mult.y);
			sdata[index]=res;
		}
	}
	double stageAngle=(inverse) ? -M_PI : M_PI;		
	for (uint n=0; n < numStages; n++){
		uint current_radix = (n<numStages-1) ? stageRadix_0 : stageRadix_1;
		switch(current_radix){
			case 2:
			{
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				double angle = stageInvocationID * stageAngle;
				
				dvec2 values[2];
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+radixStride_0)+gl_LocalInvocationID.x];
				
				radix2(values, angle);
				
				temp[0]=values[0];
				temp[4]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y+radixStride_0)+gl_LocalInvocationID.x];
				
				radix2(values, angle);
				
				temp[1]=values[0];
				temp[5]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2*gl_WorkGroupSize.y+radixStride_0)+gl_LocalInvocationID.x];
				
				radix2(values, angle);
				
				temp[2]=values[0];
				temp[6]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3*gl_WorkGroupSize.y+radixStride_0)+gl_LocalInvocationID.x];
				
				radix2(values, angle);
				
				temp[3]=values[0];
				temp[7]=values[1];

				break;
			}
			case 4:
			{
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);;
				double angle = double(stageInvocationID) * stageAngle;
				
				dvec2 values[4];
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+ radixStride_1)+gl_LocalInvocationID.x];
				values[2] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+2 * radixStride_1)+gl_LocalInvocationID.x];
				values[3] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+3* radixStride_1)+gl_LocalInvocationID.x];
				
				radix4(values, angle);
				
				temp[0]=values[0];
				temp[2]=values[1];
				temp[4]=values[2];
				temp[6]=values[3];
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);;
				angle = double(stageInvocationID) * stageAngle;
				
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y) + gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y + radixStride_1)+gl_LocalInvocationID.x];
				values[2] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y + 2 * radixStride_1)+gl_LocalInvocationID.x];
				values[3] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y+gl_WorkGroupSize.y + 3 * radixStride_1)+gl_LocalInvocationID.x];
				
				radix4(values, angle);
				
				temp[1]=values[0];
				temp[3]=values[1];
				temp[5]=values[2];
				temp[7]=values[3];
				break;
			}
			case 8:
			{
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);;
				double angle = double(stageInvocationID) * stageAngle;
				
				dvec2 values[8];
				values[0] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y)+gl_LocalInvocationID.x];
				values[1] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + radixStride_2)+gl_LocalInvocationID.x];
				values[2] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 2 * radixStride_2)+gl_LocalInvocationID.x];
				values[3] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 3 * radixStride_2)+gl_LocalInvocationID.x];
				values[4] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 4 * radixStride_2)+gl_LocalInvocationID.x];
				values[5] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 5 * radixStride_2)+gl_LocalInvocationID.x];
				values[6] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 6 * radixStride_2)+gl_LocalInvocationID.x];
				values[7] = sdata[gl_WorkGroupSize.x*(gl_LocalInvocationID.y + 7 * radixStride_2)+gl_LocalInvocationID.x];
				
				radix8(values, angle);
				
				temp[0]=values[0];
				temp[1]=values[1];
				temp[2]=values[2];
				temp[3]=values[3];
				temp[4]=values[4];
				temp[5]=values[5];
				temp[6]=values[6];
				temp[7]=values[7];
				break;
			}
		}
    
        memoryBarrierShared();
        barrier();
		switch(current_radix){
			case 2:
			{
				double stageNormalization = (inverse) ? 0.5 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.y) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[0]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[4]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[1]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[5]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+2*gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[2]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+3*gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[3]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[7]*stageNormalization;
				
				stageSize=stageSize*2;
				stageAngle=stageAngle*0.5f;
				break;
			}
			case 4:
			{
				double stageNormalization = (inverse) ? 0.25 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.y) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[0]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[2]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+2*stageSize)+gl_LocalInvocationID.x]=temp[4]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+3*stageSize)+gl_LocalInvocationID.x]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.y+gl_WorkGroupSize.y) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[1]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[3]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+2*stageSize)+gl_LocalInvocationID.x]=temp[5]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+3*stageSize)+gl_LocalInvocationID.x]=temp[7]*stageNormalization;
				
				stageSize=stageSize*4;
				stageAngle=stageAngle*0.25f;
				break;
			}
			case 8:
			{
				double stageNormalization = (inverse) ? 0.125 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.y) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.y) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 8;
				sdata[gl_WorkGroupSize.x*outputIndex+gl_LocalInvocationID.x]=temp[0]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+stageSize)+gl_LocalInvocationID.x]=temp[1]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+2*stageSize)+gl_LocalInvocationID.x]=temp[2]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+3*stageSize)+gl_LocalInvocationID.x]=temp[3]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+4*stageSize)+gl_LocalInvocationID.x]=temp[4]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+5*stageSize)+gl_LocalInvocationID.x]=temp[5]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+6*stageSize)+gl_LocalInvocationID.x]=temp[6]*stageNormalization;
				sdata[gl_WorkGroupSize.x*(outputIndex+7*stageSize)+gl_LocalInvocationID.x]=temp[7]*stageNormalization;

				stageSize=stageSize*8;
				stageAngle=stageAngle*0.125f;
				break;
			}
		}

        memoryBarrierShared();
        barrier();
	}
	
	if (!((!reorderFourStep) && (inverse))){
		
		for (uint i=0; i < 8; i++){
			double angle=2*M_PI*((((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize))*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))/double(stageStartSize*fft_dim));
			uint index=(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y));
			dvec2 mult = (inverse) ? sincos_20(-angle) : sincos_20(angle);
			dvec2 res=dvec2(sdata[index].x*mult.x-sdata[index].y*mult.y,sdata[index].y*mult.x+sdata[index].x*mult.y);
			sdata[index]=res;
		}
	}
	memoryBarrierShared();
	barrier();
	if ((zeropad_0)&&(inverse)){
		if(fft_dim==fft_dim_full){
			for (uint i=0; i < 4; i++){
				uint outputId = indexOutput((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize) + stageStartSize*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y)+((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)/stageStartSize)*(stageStartSize*fft_dim));
				if (outputBufferBlockNum==1)
					outputBlocks[0].outputs[outputId]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))];
				else
					outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))];
			}
		}else{
			for (uint i=0; i < 8; i++){
				uint outputId = ((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize) + stageStartSize*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y)+((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)/stageStartSize)*(stageStartSize*fft_dim));
				if(outputId%fft_dim_full<fft_dim_full/2)
					if (outputBufferBlockNum==1)
						outputBlocks[0].outputs[outputId]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))];
					else
						outputBlocks[indexOutput(outputId)/outputBufferBlockSize].outputs[indexOutput(outputId)%outputBufferBlockSize]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))];
			}
		}
	} else {

		for (uint i=0; i < 8; i++){
			uint outputId = indexOutput((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)%(stageStartSize) + stageStartSize*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y)+((gl_GlobalInvocationID.x + consts.workGroupShiftX*performWorkGroupShiftX*gl_WorkGroupSize.x)/stageStartSize)*(stageStartSize*fft_dim));
			if (outputBufferBlockNum==1)
				outputBlocks[0].outputs[outputId]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))];
			else
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=sdata[(gl_LocalInvocationID.x+gl_WorkGroupSize.x*(gl_LocalInvocationID.y+i*gl_WorkGroupSize.y))];
		}

	}
}
