// This file is part of VkFFT, a Vulkan Fast Fourier Transform library
//
// Copyright (C) 2020 Dmitrii Tolmachev <dtolm96@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/. 
#version 450

const float M_PI = 3.1415926535897932384626433832795;
const float M_SQRT1_2 = 0.70710678118654752440084436210485;

layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;// 32, fft/8, 1: total <1024
layout (constant_id = 4) const uint fft_dim = 2048;
layout (constant_id = 5) const bool inverse = false;
layout (constant_id = 6) const bool zeropad_0 = false;
layout (constant_id = 7) const bool zeropad_1 = false;
layout (constant_id = 8) const uint inputStride_0 = 1;
layout (constant_id = 9) const uint inputStride_1 = 1;
layout (constant_id = 10) const uint inputStride_2 = 1;
layout (constant_id = 11) const uint inputStride_3 = 1;
layout (constant_id = 12) const uint inputStride_4 = 1;
layout (constant_id = 13) const uint outputStride_0 = 1;
layout (constant_id = 14) const uint outputStride_1 = 1;
layout (constant_id = 15) const uint outputStride_2 = 1;
layout (constant_id = 16) const uint outputStride_3 = 1;
layout (constant_id = 17) const uint outputStride_4 = 1;
layout (constant_id = 18) const uint fft_dim_full = 2048;
layout (constant_id = 19) const uint stageStartSize = 2048;
layout (constant_id = 20) const uint firstStageStartSize = 2048;
layout (constant_id = 21) const uint fft_dim_x = 2048;
layout (constant_id = 22) const uint numStages = 1;
layout (constant_id = 23) const uint stageRadix_0 = 8;
layout (constant_id = 24) const uint stageRadix_1 = 8;
layout (constant_id = 25) const uint inputOffset = 0;
layout (constant_id = 26) const uint outputOffset = 0;
layout (constant_id = 27) const bool reorderFourStep = false;
layout (constant_id = 28) const uint performWorkGroupShiftX = 0;
layout (constant_id = 29) const uint performWorkGroupShiftY = 0;
layout (constant_id = 30) const uint performWorkGroupShiftZ = 0;
const uint radixStride_0 = fft_dim/2;
const uint radixStride_1 = fft_dim/4;
const uint radixStride_2 = fft_dim/8;

layout(push_constant) uniform PushConsts
{
	uint coordinate;
	uint batchID;
	uint workGroupShiftX;
	uint workGroupShiftY;
	uint workGroupShiftZ;
} consts;


layout(std430, binding = 0) buffer Data {
    vec2 inputs[];
};

layout(std430, binding = 1) buffer Data2 {
    vec2 outputs[];
};
uint indexInput(uint index) {
    return inputOffset+(index)* inputStride_0 + (gl_WorkGroupID.y + consts.workGroupShiftY*performWorkGroupShiftY)* inputStride_1 + (gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z) * inputStride_2 + consts.coordinate * inputStride_3  + consts.batchID * inputStride_4;
}
uint indexOutput(uint index) {
    return outputOffset+(index)* outputStride_0 + (gl_WorkGroupID.y + consts.workGroupShiftY*performWorkGroupShiftY)* outputStride_1 + (gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z)* outputStride_2 + consts.coordinate * outputStride_3 + consts.batchID * outputStride_4;
}

void radix2(inout vec2 values[2], float angle) {
    vec2 temp;
	vec2 w=vec2(cos(angle), sin(angle));
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
}

void radix4(inout vec2 values[4], float angle) {
	
	//DIF 1st stage with double angle
	vec2 temp;
	vec2 w=vec2(cos(angle), sin(angle));
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	//DIF 2nd stage with angle
	w=vec2(cos(0.5*angle), sin(0.5*angle));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	w = (inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);

	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp = values[1];
	values[1]=values[2];
	values[2]=temp;
}

void radix8(inout vec2 values[8], float angle) {
	//DIF 1st stage with quadruple angle
	
	vec2 temp; 
	vec2 w=vec2(cos(angle), sin(angle));
	temp.x=values[4].x*w.x-values[4].y*w.y;
	temp.y=values[4].y*w.x+values[4].x*w.y;
	values[4]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[5].x*w.x-values[5].y*w.y;
	temp.y=values[5].y*w.x+values[5].x*w.y;
	values[5]=values[1]-temp;
	values[1]=values[1]+temp;
	
	temp.x=values[6].x*w.x-values[6].y*w.y;
	temp.y=values[6].y*w.x+values[6].x*w.y;
	values[6]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[3]-temp;
	values[3]=values[3]+temp;
	
	//DIF 2nd stage with double angle
	w=vec2(cos(0.5*angle), sin(0.5*angle));
	
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	vec2 iw = (inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
    
	temp.x=values[6].x*iw.x-values[6].y*iw.y;
	temp.y=values[6].y*iw.x+values[6].x*iw.y;
	values[6]=values[4]-temp;
	values[4]=values[4]+temp;
	
	temp.x=values[7].x*iw.x-values[7].y*iw.y;
	temp.y=values[7].y*iw.x+values[7].x*iw.y;
	values[7]=values[5]-temp;
	values[5]=values[5]+temp;
	
	//DIF 3rd stage with angle
	w=vec2(cos(0.25*angle), sin(0.25*angle));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	iw = (inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
	
	temp.x=values[3].x*iw.x-values[3].y*iw.y;
	temp.y=values[3].y*iw.x+values[3].x*iw.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	iw.x=(inverse) ? w.x*M_SQRT1_2+w.y*M_SQRT1_2 : w.x*M_SQRT1_2-w.y*M_SQRT1_2;
	iw.y=(inverse) ? w.y*M_SQRT1_2-w.x*M_SQRT1_2 : w.y*M_SQRT1_2+w.x*M_SQRT1_2;
   
	temp.x=values[5].x*iw.x-values[5].y*iw.y;
	temp.y=values[5].y*iw.x+values[5].x*iw.y;
	values[5]=values[4]-temp;
	values[4]=values[4]+temp;
	
	w = (inverse) ? vec2(iw.y, -iw.x) : vec2(-iw.y, iw.x);
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[6]-temp;
	values[6]=values[6]+temp;
	
	temp = values[1];
	values[1]=values[4];
	values[4]=temp;
	
	temp = values[3];
	values[3]=values[6];
	values[6]=temp;

}
const uint sharedStride = ( (4096-gl_WorkGroupSize.y*fft_dim)*(gl_WorkGroupSize.y-1)==0 ) ?  fft_dim : fft_dim+1; //to avoid bank conflict if we transpose
shared vec2 sdata[gl_WorkGroupSize.y*sharedStride];// gl_WorkGroupSize.x - fft size,  gl_WorkGroupSize.y - grouped consequential ffts

void main() {
	if ((zeropad_0)&&(!inverse)){
		if(fft_dim==fft_dim_full){
			for (uint i=0; i < 4; i++)
				sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))];
			for (uint i=4; i < 8; i++)
				sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=vec2(0,0);
		}else{
			for (uint i=0; i < 8; i++)
				if((gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))%fft_dim_full<fft_dim_full/2)
					sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))];
				else
					sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=vec2(0,0);
		}
		
	} else {
		for (uint i=0; i < 8; i++)
			sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)]=inputs[indexInput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))];
	}
	
    memoryBarrierShared();
    barrier();

	vec2 temp[8];
    uint stageSize=1;
    float stageAngle=(inverse) ? -M_PI : M_PI;	
	//0-numStages stage
	
    for (uint n=0; n < numStages; n++){
		uint current_radix = (n<numStages-1) ? stageRadix_0 : stageRadix_1;
		switch(current_radix){
			case 2:
			{
			
				for (uint i=0; i < 4; i++){
					uint stageInvocationID = (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) & (stageSize - 1u);
					float angle = stageInvocationID * stageAngle;
					vec2 values[2];
					values[0] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+i*gl_WorkGroupSize.x];
					values[1] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+radixStride_0];
					
					radix2(values, angle);
					
					temp[i]=values[0];
					temp[i+4]=values[1];
				}
				break;
			}
			case 4:
			{
				for (uint i=0; i < 2; i++){
					uint stageInvocationID = (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x) & (stageSize - 1u);
					float angle = stageInvocationID * stageAngle;
					vec2 values[4];
					values[0] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+i*gl_WorkGroupSize.x];
					values[1] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+radixStride_1+i*gl_WorkGroupSize.x];
					values[2] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+2 * radixStride_1+i*gl_WorkGroupSize.x];
					values[3] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+3 * radixStride_1+i*gl_WorkGroupSize.x];
					
					radix4(values, angle);
					
					temp[i]=values[0];
					temp[i+2]=values[1];
					temp[i+4]=values[2];
					temp[i+6]=values[3];
				}
				break;
			}
			case 8:
			{
				
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				float angle = stageInvocationID * stageAngle;
				vec2 values[8];
				
				for (uint i=0; i < 8; i++)
					values[i] = sdata[sharedStride*gl_LocalInvocationID.y + gl_LocalInvocationID.x+i * radixStride_2];
				
				radix8(values, angle);
				
				if ((fft_dim>256)&&(stageSize==1)){
					uint tshuffle= ((gl_LocalInvocationID.x)>>1)&7;
					for (uint i=0; i < 8; i++)
						temp[i]=values[(i+tshuffle)&7];
				}else
					for (uint i=0; i < 8; i++)
						temp[i]=values[i];
				break;
			}
		}
    
        memoryBarrierShared();
        barrier();
		
		switch(current_radix){
			case 2:
			{
				float stageNormalization = (inverse) ? 0.5 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex]=temp[0]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[4]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex]=temp[1]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[5]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex]=temp[2]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex]=temp[3]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[7]*stageNormalization;
				
				stageSize=stageSize*2;
				stageAngle=stageAngle*0.5f;
				break;
			}
			case 4:
			{
				float stageNormalization = (inverse) ? 0.25 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex]=temp[0]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[2]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize*2]=temp[4]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize*3]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex]=temp[1]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[3]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize*2]=temp[5]*stageNormalization;
				sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize*3]=temp[7]*stageNormalization;
				
				stageSize=stageSize*4;
				stageAngle=stageAngle*0.25f;
				break;
			}
			case 8:
			{
			
				float stageNormalization = (inverse) ? 0.125 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 8;
				if ((fft_dim>256)&&(stageSize==1)){
					uint tshuffle= ((gl_LocalInvocationID.x)>>1)&7;
					for (uint i=0; i < 8; i++)
						sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize*((i+tshuffle)&7)]=temp[i]*stageNormalization;
				}else{
					for (uint i=0; i < 8; i++)
						sdata[sharedStride*gl_LocalInvocationID.y + outputIndex+stageSize*i]=temp[i]*stageNormalization;
				}
				stageSize=stageSize*8;
				stageAngle=stageAngle*0.125f;
				break;
			}
		}

        memoryBarrierShared();
        barrier();
    }
	if (reorderFourStep){
		if ((zeropad_0)&&(inverse)){
			if(fft_dim==fft_dim_full){
				for (uint i=0; i < 4; i++){
					uint combinedId=(gl_LocalInvocationID.x+gl_WorkGroupSize.x*gl_LocalInvocationID.y)+i*gl_WorkGroupSize.x*gl_WorkGroupSize.y;		
					outputs[indexOutput(combinedId%gl_WorkGroupSize.y + ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y + ((combinedId/gl_WorkGroupSize.y) * (fft_dim_full/fft_dim))+ ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*(fft_dim_full/firstStageStartSize))]=sdata[(combinedId%gl_WorkGroupSize.y)*sharedStride+combinedId/gl_WorkGroupSize.y];
				}
			}else{
					for (uint i=0; i < 8; i++){
						uint combinedId=(gl_LocalInvocationID.x+gl_WorkGroupSize.x*gl_LocalInvocationID.y)+i*gl_WorkGroupSize.x*gl_WorkGroupSize.y;		
						uint outputId = indexOutput(combinedId%gl_WorkGroupSize.y + ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y + ((combinedId/gl_WorkGroupSize.y) * (fft_dim_full/fft_dim))+ ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*(fft_dim_full/firstStageStartSize));
						if(outputId%fft_dim_full<fft_dim_full/2)
							outputs[outputId]=sdata[(combinedId%gl_WorkGroupSize.y)*sharedStride+combinedId/gl_WorkGroupSize.y];
				
					}
			}
			
		} else {
			for (uint i=0; i < 8; i++){
				uint combinedId=(gl_LocalInvocationID.x+gl_WorkGroupSize.x*gl_LocalInvocationID.y)+i*gl_WorkGroupSize.x*gl_WorkGroupSize.y;		
				uint outputId = indexOutput(combinedId%gl_WorkGroupSize.y + ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y + ((combinedId/gl_WorkGroupSize.y) * (fft_dim_full/fft_dim))+ ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*(fft_dim_full/firstStageStartSize));
				outputs[outputId]=sdata[(combinedId%gl_WorkGroupSize.y)*sharedStride+combinedId/gl_WorkGroupSize.y];
			}
			
		}
	}else{
		if ((zeropad_0)&&(inverse)){
			if(fft_dim==fft_dim_full){
				for (uint i=0; i < 4; i++)
					outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))]=sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)];
			}else{
				for (uint i=0; i < 8; i++){
					uint combinedId=(gl_LocalInvocationID.x+gl_WorkGroupSize.x*gl_LocalInvocationID.y)+i*gl_WorkGroupSize.x*gl_WorkGroupSize.y;		
					uint outputId = indexOutput(combinedId%gl_WorkGroupSize.y + ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y + ((combinedId/gl_WorkGroupSize.y) * (fft_dim_full/fft_dim))+ ((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*(fft_dim_full/firstStageStartSize));
					if(outputId%fft_dim_full<fft_dim_full/2)
						outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))]=sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)];
				}
			}
			
		} else {
			for (uint i=0; i < 8; i++)
				outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x+gl_LocalInvocationID.y*firstStageStartSize+(((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)%(firstStageStartSize/fft_dim))*fft_dim+((gl_WorkGroupID.x + consts.workGroupShiftX*performWorkGroupShiftX)/(firstStageStartSize/fft_dim))*gl_WorkGroupSize.y*firstStageStartSize))]=sdata[sharedStride*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)];
		}	
	}

}
