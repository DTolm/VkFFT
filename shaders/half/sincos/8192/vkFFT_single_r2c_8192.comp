// This file is part of VkFFT, a Vulkan Fast Fourier Transform library
//
// Copyright (C) 2020 Dmitrii Tolmachev <dtolm96@gmail.com>
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/. 
#version 450
#extension GL_EXT_shader_16bit_storage : require

const float M_PI = 3.1415926535897932384626433832795;
const float M_SQRT1_2 = 0.70710678118654752440084436210485;

layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;// 32, fft/8, 1: total <1024
layout (constant_id = 4) const uint fft_dim = 2048;
layout (constant_id = 5) const bool inverse = false;
layout (constant_id = 6) const bool zeropad_0 = false;
layout (constant_id = 7) const bool zeropad_1 = false;
layout (constant_id = 8) const uint inputStride_0 = 1;
layout (constant_id = 9) const uint inputStride_1 = 1;
layout (constant_id = 10) const uint inputStride_2 = 1;
layout (constant_id = 11) const uint inputStride_3 = 1;
layout (constant_id = 12) const uint inputStride_4 = 1;
layout (constant_id = 13) const uint outputStride_0 = 1;
layout (constant_id = 14) const uint outputStride_1 = 1;
layout (constant_id = 15) const uint outputStride_2 = 1;
layout (constant_id = 16) const uint outputStride_3 = 1;
layout (constant_id = 17) const uint outputStride_4 = 1;
layout (constant_id = 18) const uint fft_dim_full = 2048;
layout (constant_id = 19) const uint stageStartSize = 2048;
layout (constant_id = 20) const uint firstStageStartSize = 2048;
layout (constant_id = 21) const uint fft_dim_x = 2048;
layout (constant_id = 22) const uint numStages = 1;
layout (constant_id = 23) const uint stageRadix_0 = 8;
layout (constant_id = 24) const uint stageRadix_1 = 8;
layout (constant_id = 25) const uint inputOffset = 0;
layout (constant_id = 26) const uint outputOffset = 0;
layout (constant_id = 27) const bool reorderFourStep = false;
layout (constant_id = 28) const uint performWorkGroupShiftX = 0;
layout (constant_id = 29) const uint performWorkGroupShiftY = 0;
layout (constant_id = 30) const uint performWorkGroupShiftZ = 0;
layout (constant_id = 31) const uint inputBufferBlockNum = 1;
layout (constant_id = 32) const uint inputBufferBlockSize = 1;
layout (constant_id = 33) const uint outputBufferBlockNum = 1;
layout (constant_id = 34) const uint outputBufferBlockSize = 1;
layout (constant_id = 35) const uint kernelBlockNum = 1;
layout (constant_id = 36) const uint kernelBlockSize = 1;
const uint radixStride_0 = fft_dim/2;
const uint radixStride_1 = fft_dim/4;
const uint radixStride_2 = fft_dim/8;

layout(push_constant) uniform PushConsts
{
	uint coordinate;
	uint batchID;
	uint workGroupShiftX;
	uint workGroupShiftY;
	uint workGroupShiftZ;
} consts;


layout(std430, binding = 0) buffer Data {
    float16_t inputs[inputBufferBlockSize];
} inputBlocks[inputBufferBlockNum];

layout(std430, binding = 1) buffer Data2 {
    f16vec2 outputs[outputBufferBlockSize];
} outputBlocks[outputBufferBlockNum];
uint indexInput(uint index) {
    return inputOffset+index * inputStride_0 + 2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y) * inputStride_1 + 2*(gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z) * inputStride_2 + 2*consts.coordinate * inputStride_3 + 2*consts.batchID * inputStride_4 ;
}
uint indexOutput(uint index_x, uint index_y) {
    return outputOffset+index_x * outputStride_0 + index_y * outputStride_1 + (gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z) * outputStride_2 + consts.coordinate * outputStride_3+ consts.batchID * outputStride_4;
}

void radix2(inout vec2 values[2], float angle) {
    vec2 temp;
	vec2 w=vec2(cos(angle), sin(angle));
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
}

void radix4(inout vec2 values[4], float angle) {
	
	//DIF 1st stage with double angle
	vec2 temp;
	vec2 w=vec2(cos(angle), sin(angle));
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	//DIF 2nd stage with angle
	w=vec2(cos(0.5*angle), sin(0.5*angle));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	w = (inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);

	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp = values[1];
	values[1]=values[2];
	values[2]=temp;
}

void radix8(inout vec2 values[8], float angle) {
	//DIF 1st stage with quadruple angle
	
	vec2 temp; 
	vec2 w=vec2(cos(angle), sin(angle));
	temp.x=values[4].x*w.x-values[4].y*w.y;
	temp.y=values[4].y*w.x+values[4].x*w.y;
	values[4]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[5].x*w.x-values[5].y*w.y;
	temp.y=values[5].y*w.x+values[5].x*w.y;
	values[5]=values[1]-temp;
	values[1]=values[1]+temp;
	
	temp.x=values[6].x*w.x-values[6].y*w.y;
	temp.y=values[6].y*w.x+values[6].x*w.y;
	values[6]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[3]-temp;
	values[3]=values[3]+temp;
	
	//DIF 2nd stage with double angle
	w=vec2(cos(0.5*angle), sin(0.5*angle));
	
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	vec2 iw = (inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
    
	temp.x=values[6].x*iw.x-values[6].y*iw.y;
	temp.y=values[6].y*iw.x+values[6].x*iw.y;
	values[6]=values[4]-temp;
	values[4]=values[4]+temp;
	
	temp.x=values[7].x*iw.x-values[7].y*iw.y;
	temp.y=values[7].y*iw.x+values[7].x*iw.y;
	values[7]=values[5]-temp;
	values[5]=values[5]+temp;
	
	//DIF 3rd stage with angle
	w=vec2(cos(0.25*angle), sin(0.25*angle));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	iw = (inverse) ? vec2(w.y, -w.x) : vec2(-w.y, w.x);
	
	temp.x=values[3].x*iw.x-values[3].y*iw.y;
	temp.y=values[3].y*iw.x+values[3].x*iw.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	iw.x=(inverse) ? w.x*M_SQRT1_2+w.y*M_SQRT1_2 : w.x*M_SQRT1_2-w.y*M_SQRT1_2;
	iw.y=(inverse) ? w.y*M_SQRT1_2-w.x*M_SQRT1_2 : w.y*M_SQRT1_2+w.x*M_SQRT1_2;
   
	temp.x=values[5].x*iw.x-values[5].y*iw.y;
	temp.y=values[5].y*iw.x+values[5].x*iw.y;
	values[5]=values[4]-temp;
	values[4]=values[4]+temp;
	
	w = (inverse) ? vec2(iw.y, -iw.x) : vec2(-iw.y, iw.x);
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[6]-temp;
	values[6]=values[6]+temp;
	
	temp = values[1];
	values[1]=values[4];
	values[4]=temp;
	
	temp = values[3];
	values[3]=values[6];
	values[6]=temp;

}

const uint max_shared_vec2=4096;
const uint ratio_over_max =  2;//  reg mem/shared mem
const uint tempSize = fft_dim/gl_WorkGroupSize.x;
shared vec2 sdata[max_shared_vec2];// half real half imag


void main() {

	vec2 temp0[8];
	vec2 temp1[8];
	uint stageSize=1;
    float stageAngle=(inverse) ? -M_PI : M_PI;
	if(inputBufferBlockNum==1){
		if (zeropad_0){
			for(uint j = 0; j < 8; ++j){
				uint inputID = indexInput(gl_LocalInvocationID.x+(j)*gl_WorkGroupSize.x);
				temp0[j].x=float(inputBlocks[0].inputs[inputID]);
				inputID+=inputStride_1;
				temp0[j].y=float(inputBlocks[0].inputs[inputID]);
			}
			for(uint j = 0; j < 8; ++j){
				temp1[j]=vec2(0,0);
				
			}
		}else {
			for(uint j = 0; j < 8; ++j){
				uint inputID = indexInput(gl_LocalInvocationID.x+(j)*gl_WorkGroupSize.x);
				temp0[j].x=float(inputBlocks[0].inputs[inputID]);
				inputID+=inputStride_1;
				temp0[j].y=float(inputBlocks[0].inputs[inputID]);
				inputID = indexInput(gl_LocalInvocationID.x+(j+8)*gl_WorkGroupSize.x);
				temp1[j].x=float(inputBlocks[0].inputs[inputID]);
				inputID+=inputStride_1;
				temp1[j].y=float(inputBlocks[0].inputs[inputID]);
			}
		}
	}else{
		if (zeropad_0){
			for(uint j = 0; j < 8; ++j){
				uint inputID = indexInput(gl_LocalInvocationID.x+(j)*gl_WorkGroupSize.x);
				temp0[j].x=float(inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize]);
				inputID+=inputStride_1;
				temp0[j].y=float(inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize]);
			}
			for(uint j = 0; j < 8; ++j){
				temp1[j]=vec2(0,0);
				
			}
		}else {
			for(uint j = 0; j < 8; ++j){
				uint inputID = indexInput(gl_LocalInvocationID.x+(j)*gl_WorkGroupSize.x);
				temp0[j].x=float(inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize]);
				inputID+=inputStride_1;
				temp0[j].y=float(inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize]);
				inputID = indexInput(gl_LocalInvocationID.x+(j+8)*gl_WorkGroupSize.x);
				temp1[j].x=float(inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize]);
				inputID+=inputStride_1;
				temp1[j].y=float(inputBlocks[inputID/inputBufferBlockSize].inputs[inputID%inputBufferBlockSize]);
			}
		}
	}
	for (uint n=0; n < numStages-1; n++){//all stages but last are radix-8
		{
			vec2 sort0[8];
			for(uint j = 0; j < 4; ++j){
				sort0[j]=temp0[1+2*j];
				sort0[j+4]=temp1[1+2*j];}
			
			for(uint j = 0; j < 4; ++j)
				temp0[j]=temp0[2*j];
			
			for(uint j = 0; j < 4; ++j)
				temp0[j+4]=temp1[2*j];
			
			for (uint j=0; j<8; j++)
				temp1[j]=sort0[j];

		}
		{
			uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
			float angle = stageInvocationID * stageAngle;
			
			
			radix8(temp0, angle);


		}
		{

			uint stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
			float angle = stageInvocationID * stageAngle;
			


			radix8(temp1, angle);


		}
        memoryBarrierShared();
        barrier();
		
		//all stages but last have no shifts larger than shared memory size - no need for swap buffer. Need to serialize thread groups in ratio_over_max amount of batches and exchange data
		{
			float stageNormalization = (inverse) ? 0.125 : 1.0;
			uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
			uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
			uint outputIndex = stageInvocationID + blockInvocationID * 8;
			for(uint j = 0; j < 8; ++j){	
				sdata[outputIndex+stageSize*j]=temp0[j]*stageNormalization;
			}
			memoryBarrierShared();
			barrier();
			
			for (uint j=0; j<8; j++){
				temp0[j] = sdata[(gl_LocalInvocationID.x)+gl_WorkGroupSize.x*j];			
			}
			
			memoryBarrierShared();
			barrier();

			for(uint j = 0; j < 8; ++j){	
				sdata[outputIndex+stageSize*j]=temp1[j]*stageNormalization;
			}
			memoryBarrierShared();
			barrier();
			
			for (uint j=0; j<8; j++){
				temp1[j] = sdata[(gl_LocalInvocationID.x)+gl_WorkGroupSize.x*j];			
			}
			
			memoryBarrierShared();
			barrier();
			
		}
		
		stageSize=stageSize*8;
		stageAngle=stageAngle*0.125f;
    }
	
	
	//last stage - arbitrary radix
	//stageSize=4096;
	{
		vec2 sort0[8];
		for (uint t=0; t<4; t++){
			sort0[t*2]=temp0[t];
			sort0[t*2+1]=temp1[t];
		}
		for (uint t=0; t<4; t++){
			temp0[t]=sort0[t];
			temp1[t]=sort0[t+4];
		}
		for (uint t=0; t<4; t++){
			sort0[t*2]=temp0[t+4];
			sort0[t*2+1]=temp1[t+4];
		}
		for (uint t=0; t<4; t++)
			temp0[t+4]=temp1[t];
		
		for (uint t=0; t<8; t++)
			temp1[t]=sort0[t];
		
		
	}
	
	
	for (uint i=0; i<4; i++){
		uint stageInvocationID = (gl_LocalInvocationID.x + i*gl_WorkGroupSize.x ) & (stageSize - 1u);
		float angle = stageInvocationID * stageAngle;
		
		
		vec2 values[2];
		for(uint j = 0; j < 2; ++j){
			values[j] = temp0[i*2+j];
		}
		radix2(values, angle);
		for(uint j = 0; j < 2; ++j){
			temp0[i*2+j]=values[j];
		}

	}
	for (uint i=0; i<4; i++){
		uint stageInvocationID = (gl_LocalInvocationID.x + (i+4)*gl_WorkGroupSize.x ) & (stageSize - 1u);
		float angle = stageInvocationID * stageAngle;
		
		vec2 values[2];
		for(uint j = 0; j < 2; ++j){
			values[j] = temp1[i*2+j];
		}
		radix2(values, angle);
		for(uint j = 0; j < 2; ++j){
			temp1[i*2+j]=values[j];
		}

	}
	{
		vec2 sort0[8];
		for (uint t=0; t<4; t++){
			sort0[t]=temp0[t*2+1];
			sort0[t+4]=temp1[t*2+1];
		}
		for (uint t=0; t<4; t++)
			temp0[t]=temp0[t*2];
		
		for (uint t=0; t<4; t++)
			temp0[t+4]=temp1[t*2];
		
		for (uint t=0; t<8; t++)
			temp1[t]=sort0[t];
		
	}
	

	//r2c decomp
	memoryBarrierShared();
	barrier();
	for (uint i=0; i<4; i++){
					
		float stageNormalization = (inverse) ? 0.5 : 1.0;
		sdata[gl_LocalInvocationID.x + i*gl_WorkGroupSize.x]=temp0[i]*stageNormalization;
		sdata[gl_LocalInvocationID.x + (i+4)*gl_WorkGroupSize.x]=temp1[i+4]*stageNormalization;
	}
	
	memoryBarrierShared();
	barrier();
	if (gl_LocalInvocationID.x>0) {
		for (uint i=0; i<4; i++){
			temp0[i].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
			temp0[i].y=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y-sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i+4].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i+4].y=0.5*(-sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
		}
	} else {
		vec2 temp[2];
		temp[0].x=sdata[0].x;
        temp[0].y=0;
        temp[1].x=sdata[0].y;
        temp[1].y=0;
		if (outputBufferBlockNum==1){
			if (zeropad_1){
				uint outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y),  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y);
				outputBlocks[0].outputs[outputId]=f16vec2(temp[0]);
				outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y)+1, gl_WorkGroupSize.y*2*gl_NumWorkGroups.y);
				outputBlocks[0].outputs[outputId]=f16vec2(temp[1]);
			} else {
				uint outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y),  gl_WorkGroupSize.y*gl_NumWorkGroups.y);
				outputBlocks[0].outputs[outputId]=f16vec2(temp[0]);
				outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y)+1, gl_WorkGroupSize.y*gl_NumWorkGroups.y);
				outputBlocks[0].outputs[outputId]=f16vec2(temp[1]);
			}
		}else{
			if (zeropad_1){
				uint outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y),  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y);
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp[0]);
				outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y)+1, gl_WorkGroupSize.y*2*gl_NumWorkGroups.y);
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp[1]);
			} else {
				uint outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y),  gl_WorkGroupSize.y*gl_NumWorkGroups.y);
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp[0]);
				outputId = indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y)+1, gl_WorkGroupSize.y*gl_NumWorkGroups.y);
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp[1]);
			}
		}
		
		for (uint i=1; i<4; i++){
			temp0[i].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
			temp0[i].y=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y-sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i+4].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i+4].y=0.5*(-sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
		}
	}
	memoryBarrierShared();
	barrier();
	for (uint i=0; i<4; i++){			
		float stageNormalization = (inverse) ? 0.5 : 1.0;
		sdata[gl_LocalInvocationID.x + i*gl_WorkGroupSize.x]=temp0[i+4]*stageNormalization;
	}
	memoryBarrierShared();
	barrier();
	if (gl_LocalInvocationID.x==0) 
	{
		temp0[4].x=0.5*(sdata[0].x+sdata[4*gl_WorkGroupSize.x].x);
		temp0[4].y=0.5*(sdata[0].y-sdata[4*gl_WorkGroupSize.x].y);
		temp1[4].x=0.5*(sdata[0].y+sdata[4*gl_WorkGroupSize.x].y);
		temp1[4].y=0.5*(-sdata[0].x+sdata[4*gl_WorkGroupSize.x].x);
	}
	memoryBarrierShared();
	barrier();
	for (uint i=0; i<4; i++){			
		float stageNormalization = (inverse) ? 0.5 : 1.0;
		sdata[gl_LocalInvocationID.x + (i+4)*gl_WorkGroupSize.x]=temp1[i]*stageNormalization;
	}
	memoryBarrierShared();
	barrier();
	if (gl_LocalInvocationID.x>0) {
		for (uint i=0; i<4; i++){
			temp0[i+4].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
			temp0[i+4].y=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y-sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i].y=0.5*(-sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
		}
	}else {
		for (uint i=1; i<4; i++){
			temp0[i+4].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
			temp0[i+4].y=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y-sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i].x=0.5*(sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
			temp1[i].y=0.5*(-sdata[gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[8*gl_WorkGroupSize.x-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
		}
		temp1[0].x=(sdata[4*gl_WorkGroupSize.x].y);
		temp1[0].y=0;
		temp0[0].x=(sdata[4*gl_WorkGroupSize.x].x);
		temp0[0].y=0;
		
	}
	memoryBarrierShared();
	barrier();
	
	//r2c save
	if (outputBufferBlockNum==1){
		if (gl_LocalInvocationID.x>0){
			for (uint i=0; i<4; i++){
				uint outputId = indexOutput((gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp0[i]);
				outputId = indexOutput((gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp0[i+4]);
				outputId = indexOutput((gl_LocalInvocationID.x+(i+8)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp1[i+4]);
				outputId = indexOutput((gl_LocalInvocationID.x+(i+12)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp1[i]);
			}
		} else{
			for (uint i=1; i<4; i++){
				uint outputId = indexOutput((i*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp0[i]);
				outputId = indexOutput(((i+4)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp0[i+4]);
				outputId = indexOutput(((i+8)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp1[i+4]);
				outputId = indexOutput(((i+12)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[0].outputs[outputId]=f16vec2(temp1[i]);
			}
			uint outputId = indexOutput((4*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[0].outputs[outputId]=f16vec2(temp0[4]);
			outputId = indexOutput((8*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[0].outputs[outputId]=f16vec2(temp0[0]);
			outputId = indexOutput((12*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[0].outputs[outputId]=f16vec2(temp1[4]);
			outputId = indexOutput((16*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[0].outputs[outputId]=f16vec2(temp1[0]);
		
		}
	}else{
		if (gl_LocalInvocationID.x>0){
			for (uint i=0; i<4; i++){
				uint outputId = indexOutput((gl_LocalInvocationID.x+i*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp0[i]);
				outputId = indexOutput((gl_LocalInvocationID.x+(i+4)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp0[i+4]);
				outputId = indexOutput((gl_LocalInvocationID.x+(i+8)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp1[i+4]);
				outputId = indexOutput((gl_LocalInvocationID.x+(i+12)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp1[i]);
			}
		} else{
			for (uint i=1; i<4; i++){
				uint outputId = indexOutput((i*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp0[i]);
				outputId = indexOutput(((i+4)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp0[i+4]);
				outputId = indexOutput(((i+8)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp1[i+4]);
				outputId = indexOutput(((i+12)*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
				outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp1[i]);
			}
			uint outputId = indexOutput((4*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp0[4]);
			outputId = indexOutput((8*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp0[0]);
			outputId = indexOutput((12*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp1[4]);
			outputId = indexOutput((16*gl_WorkGroupSize.x-1), (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y));
			outputBlocks[outputId/outputBufferBlockSize].outputs[outputId%outputBufferBlockSize]=f16vec2(temp1[0]);
		
		}
	}
}
