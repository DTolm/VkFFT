#version 450

layout(std430, binding = 0) buffer Input
{
   vec2 inputs[];
};

layout(std430, binding = 1) buffer Output
{
   vec2 outputs[];
};

layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in; //32 - 32/ratio - 1

layout (constant_id = 4) const uint inputStride_0 = 1;
layout (constant_id = 5) const uint inputStride_1 = 1;
layout (constant_id = 6) const uint inputStride_2 = 1;
layout (constant_id = 7) const uint inputStride_3 = 1;
layout (constant_id = 8) const uint inputStride_4 = 1;
layout (constant_id = 9) const uint ratio = 8;
layout (constant_id = 10) const uint ratioDirection_0 = 0;
layout (constant_id = 11) const uint ratioDirection_1 = 1;

layout(push_constant) uniform PushConsts
{
	uint coordinate;
	uint batchID;
} consts;

uint index(uint index_x, uint index_y) {
    return index_x * inputStride_0 + index_y * inputStride_1 + gl_GlobalInvocationID.z * inputStride_2 + consts.coordinate * inputStride_3 + consts.batchID * inputStride_4;
}

const uint stride = gl_WorkGroupSize.x+1;
shared vec2 sdata[2*gl_WorkGroupSize.y*stride];

void main()
{
	//only transpose current x with y or z, due to the memory access patterns 
 
	if (gl_WorkGroupID.x<gl_WorkGroupID.y)
		return;
	if (gl_WorkGroupID.x!=gl_WorkGroupID.y){
		
		uint id=index(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
		uint pos = gl_LocalInvocationID.y*stride + gl_LocalInvocationID.x;
		sdata[pos]=inputs[id];
		
		uint id_comp=index(gl_WorkGroupID.y*gl_WorkGroupSize.x + gl_LocalInvocationID.x, gl_WorkGroupID.x*gl_WorkGroupSize.y + gl_LocalInvocationID.y);
		sdata[pos+gl_WorkGroupSize.y*stride]=inputs[id_comp];
		
		memoryBarrierShared();
		barrier();
		
		pos =(gl_LocalInvocationID.y*ratio+gl_LocalInvocationID.x%ratio) + (gl_LocalInvocationID.x/ratio)*stride;
		outputs[id]=sdata[pos+gl_WorkGroupSize.y*stride];
		outputs[id_comp]=sdata[pos];
		
	}
	else {
		
		uint id=index(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
		uint pos = gl_LocalInvocationID.y*stride + gl_LocalInvocationID.x;
		sdata[pos]=inputs[id];
		
		memoryBarrierShared();
		barrier();
		
		pos =(gl_LocalInvocationID.y*ratio+gl_LocalInvocationID.x%ratio) + (gl_LocalInvocationID.x/ratio)*stride;
		outputs[id]=sdata[pos];	
	
	}
	
}
