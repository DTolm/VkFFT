#version 450
#extension GL_ARB_gpu_shader_fp64 : enable
#extension GL_ARB_gpu_shader_int64 : enable

const double M_PI = 3.1415926535897932384626433832795LF;
const double M_SQRT1_2 = 0.70710678118654752440084436210485LF;
const double M_2_PI = 0.63661977236758134307553505349006LF;
const double M_PI_2 = 1.5707963267948966192313216916398LF;
const double a1 = 0.99999999999999999999962122687403772LF;
const double a3 = -0.166666666666666666637194166219637268LF;
const double a5 =  0.00833333333333333295212653322266277182LF;
const double a7 = -0.000198412698412696489459896530659927773LF;
const double a9 =  2.75573192239364018847578909205399262e-6LF;
const double a11 = -2.50521083781017605729370231280411712e-8LF;
const double a13 = 1.60590431721336942356660057796782021e-10LF;
const double a15 = -7.64712637907716970380859898835680587e-13LF;
const double a17 = 2.81018528153898622636194976499656274e-15LF;
const double ab = -7.97989713648499642889739108679114937e-18LF;
dvec2 sincos_20(double x)
{
    //minimax coefs for sin for 0..pi/2 range
    double y = abs(x * M_2_PI);
    double q = floor(y);
    int quadrant = int(q);
    double t = (quadrant & 1) != 0 ? 1 - y + q : y - q;
    t *= M_PI_2;
    double t2 = t * t;
    double r = fma(fma(fma(fma(fma(fma(fma(fma(fma(ab, t2, a17), t2, a15), t2, a13), t2, a11), t2, a9), t2, a7), t2, a5), t2, a3), t2*t, t);
	dvec2 cos_sin;
	cos_sin.x=((quadrant == 0)||(quadrant == 3)) ? sqrt(1-r*r) : -sqrt(1-r*r);
	r = x < 0 ? -r : r;
	cos_sin.y=(quadrant & 2) != 0 ? -r : r;
    return cos_sin;
}


layout (local_size_x_id = 1, local_size_y_id = 2, local_size_z_id = 3) in;// 32, fft/8, 1: total <1024
layout (constant_id = 4) const uint fft_dim = 2048;
layout (constant_id = 5) const bool inverse = false;
layout (constant_id = 6) const bool zeropad_0 = false;
layout (constant_id = 7) const bool zeropad_1 = false;
layout (constant_id = 8) const uint inputStride_0 = 1;
layout (constant_id = 9) const uint inputStride_1 = 1;
layout (constant_id = 10) const uint inputStride_2 = 1;
layout (constant_id = 11) const uint inputStride_3 = 1;
layout (constant_id = 12) const uint inputStride_4 = 1;
layout (constant_id = 13) const uint outputStride_0 = 1;
layout (constant_id = 14) const uint outputStride_1 = 1;
layout (constant_id = 15) const uint outputStride_2 = 1;
layout (constant_id = 16) const uint outputStride_3 = 1;
layout (constant_id = 17) const uint outputStride_4 = 1;
layout (constant_id = 18) const uint fft_dim_full = 2048;
layout (constant_id = 19) const uint stageStartSize = 2048;
layout (constant_id = 20) const uint firstStageStartSize = 2048;
layout (constant_id = 21) const uint fft_dim_x = 2048;
layout (constant_id = 22) const uint numStages = 1;
layout (constant_id = 23) const uint stageRadix_0 = 8;
layout (constant_id = 24) const uint stageRadix_1 = 8;
layout (constant_id = 25) const uint inputOffset = 0;
layout (constant_id = 26) const uint outputOffset = 0;
layout (constant_id = 27) const bool reorderFourStep = false;
layout (constant_id = 28) const uint performWorkGroupShiftX = 0;
layout (constant_id = 29) const uint performWorkGroupShiftY = 0;
layout (constant_id = 30) const uint performWorkGroupShiftZ = 0;
const uint radixStride_0 = fft_dim/2;
const uint radixStride_1 = fft_dim/4;
const uint radixStride_2 = fft_dim/8;

layout(push_constant) uniform PushConsts
{
	uint coordinate;
	uint batchID;
	uint workGroupShiftX;
	uint workGroupShiftY;
	uint workGroupShiftZ;
} consts;


layout(std430, binding = 0) buffer Data {
    double inputs[];
};

layout(std430, binding = 1) buffer Data2 {
    dvec2 outputs[];
};

uint indexInput(uint index) {
    return inputOffset+index * inputStride_0 + 2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y) * inputStride_1 + 2*(gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z) * inputStride_2 + 2*consts.coordinate * inputStride_3 + 2*consts.batchID * inputStride_4 ;
}
uint indexOutput(uint index_x, uint index_y) {
    return outputOffset+index_x * outputStride_0 + index_y * outputStride_1 + (gl_GlobalInvocationID.z + consts.workGroupShiftZ*performWorkGroupShiftZ*gl_WorkGroupSize.z) * outputStride_2 + consts.coordinate * outputStride_3 + consts.batchID * outputStride_4;
}


void radix2(inout dvec2 values[2], double angle) {
    dvec2 temp;
	dvec2 w=sincos_20(angle);
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
}

void radix4(inout dvec2 values[4], double angle) {
	
	//DIF 1st stage with double angle
	dvec2 temp;
	dvec2 w=sincos_20(angle);
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	//DIF 2nd stage with angle
	w=normalize(w + dvec2(1.0, 0.0));
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	w = (inverse) ? dvec2(w.y, -w.x) : dvec2(-w.y, w.x);

	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp = values[1];
	values[1]=values[2];
	values[2]=temp;
}

void radix8(inout dvec2 values[8], double angle) {
	//DIF 1st stage with quadruple angle
	
	dvec2 temp; 
	dvec2 w=sincos_20(angle);
	temp.x=values[4].x*w.x-values[4].y*w.y;
	temp.y=values[4].y*w.x+values[4].x*w.y;
	values[4]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[5].x*w.x-values[5].y*w.y;
	temp.y=values[5].y*w.x+values[5].x*w.y;
	values[5]=values[1]-temp;
	values[1]=values[1]+temp;
	
	temp.x=values[6].x*w.x-values[6].y*w.y;
	temp.y=values[6].y*w.x+values[6].x*w.y;
	values[6]=values[2]-temp;
	values[2]=values[2]+temp;
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[3]-temp;
	values[3]=values[3]+temp;
	
	//DIF 2nd stage with double angle
	w=normalize(w + dvec2(1.0, 0.0));
	
	temp.x=values[2].x*w.x-values[2].y*w.y;
	temp.y=values[2].y*w.x+values[2].x*w.y;
	values[2]=values[0]-temp;
	values[0]=values[0]+temp;
	
	temp.x=values[3].x*w.x-values[3].y*w.y;
	temp.y=values[3].y*w.x+values[3].x*w.y;
	values[3]=values[1]-temp;
	values[1]=values[1]+temp;
	
	dvec2 iw = (inverse) ? dvec2(w.y, -w.x) : dvec2(-w.y, w.x);
    
	temp.x=values[6].x*iw.x-values[6].y*iw.y;
	temp.y=values[6].y*iw.x+values[6].x*iw.y;
	values[6]=values[4]-temp;
	values[4]=values[4]+temp;
	
	temp.x=values[7].x*iw.x-values[7].y*iw.y;
	temp.y=values[7].y*iw.x+values[7].x*iw.y;
	values[7]=values[5]-temp;
	values[5]=values[5]+temp;
	
	//DIF 3rd stage with angle
	w=normalize(w + dvec2(1.0, 0.0));;
	
	temp.x=values[1].x*w.x-values[1].y*w.y;
	temp.y=values[1].y*w.x+values[1].x*w.y;
	values[1]=values[0]-temp;
	values[0]=values[0]+temp;
	
	iw = (inverse) ? dvec2(w.y, -w.x) : dvec2(-w.y, w.x);
	
	temp.x=values[3].x*iw.x-values[3].y*iw.y;
	temp.y=values[3].y*iw.x+values[3].x*iw.y;
	values[3]=values[2]-temp;
	values[2]=values[2]+temp;
	
	iw.x=(inverse) ? w.x*M_SQRT1_2+w.y*M_SQRT1_2 : w.x*M_SQRT1_2-w.y*M_SQRT1_2;
	iw.y=(inverse) ? w.y*M_SQRT1_2-w.x*M_SQRT1_2 : w.y*M_SQRT1_2+w.x*M_SQRT1_2;
   
	temp.x=values[5].x*iw.x-values[5].y*iw.y;
	temp.y=values[5].y*iw.x+values[5].x*iw.y;
	values[5]=values[4]-temp;
	values[4]=values[4]+temp;
	
	w = (inverse) ? dvec2(iw.y, -iw.x) : dvec2(-iw.y, iw.x);
	
	temp.x=values[7].x*w.x-values[7].y*w.y;
	temp.y=values[7].y*w.x+values[7].x*w.y;
	values[7]=values[6]-temp;
	values[6]=values[6]+temp;
	
	temp = values[1];
	values[1]=values[4];
	values[4]=temp;
	
	temp = values[3];
	values[3]=values[6];
	values[6]=temp;

}

shared dvec2 sdata[gl_WorkGroupSize.y*fft_dim];

void main() {

	sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x].x=inputs[indexInput(gl_LocalInvocationID.x)];
	sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x].y=inputs[indexInput(gl_LocalInvocationID.x)+inputStride_1];
	sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+gl_WorkGroupSize.x)];
	sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+gl_WorkGroupSize.x)+inputStride_1];
	sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+2*gl_WorkGroupSize.x)];
	sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+2*gl_WorkGroupSize.x)+inputStride_1];
	sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+3*gl_WorkGroupSize.x)];
	sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+3*gl_WorkGroupSize.x)+inputStride_1];
	if (zeropad_0){
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+4*gl_WorkGroupSize.x)].x=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+4*gl_WorkGroupSize.x)].y=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+5*gl_WorkGroupSize.x)].x=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+5*gl_WorkGroupSize.x)].y=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+6*gl_WorkGroupSize.x)].x=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+6*gl_WorkGroupSize.x)].y=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+7*gl_WorkGroupSize.x)].x=0;
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+7*gl_WorkGroupSize.x)].y=0;
	} else {
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+4*gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+4*gl_WorkGroupSize.x)];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+4*gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+4*gl_WorkGroupSize.x)+inputStride_1];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+5*gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+5*gl_WorkGroupSize.x)];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+5*gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+5*gl_WorkGroupSize.x)+inputStride_1];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+6*gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+6*gl_WorkGroupSize.x)];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+6*gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+6*gl_WorkGroupSize.x)+inputStride_1];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+7*gl_WorkGroupSize.x)].x=inputs[indexInput(gl_LocalInvocationID.x+7*gl_WorkGroupSize.x)];
		sdata[fft_dim*gl_LocalInvocationID.y + (gl_LocalInvocationID.x+7*gl_WorkGroupSize.x)].y=inputs[indexInput(gl_LocalInvocationID.x+7*gl_WorkGroupSize.x)+inputStride_1];
    }
	memoryBarrierShared();
    barrier();

	dvec2 temp[8];
    uint stageSize=1;
    double stageAngle=(inverse) ? -M_PI : M_PI;
	
	//0-numStages stage
    for (uint n=0; n < numStages; n++){
		uint current_radix = (n<numStages-1) ? stageRadix_0 : stageRadix_1;
		switch(current_radix){
			case 2:
			{
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				double angle = stageInvocationID * stageAngle;
				
				dvec2 values[2];
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+radixStride_0];
				
				radix2(values, angle);
				
				temp[0]=values[0];
				temp[4]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+gl_WorkGroupSize.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+gl_WorkGroupSize.x+radixStride_0];
				
				radix2(values, angle);
				
				temp[1]=values[0];
				temp[5]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+2*gl_WorkGroupSize.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+2*gl_WorkGroupSize.x+radixStride_0];
				
				radix2(values, angle);
				
				temp[2]=values[0];
				temp[6]=values[1];
				
				stageInvocationID = (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x) & (stageSize - 1u);
				angle = stageInvocationID * stageAngle;
				
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+3*gl_WorkGroupSize.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+3*gl_WorkGroupSize.x+radixStride_0];
				
				radix2(values, angle);
				
				temp[3]=values[0];
				temp[7]=values[1];

				break;
			}
			case 4:
			{
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				double angle = double(stageInvocationID) * stageAngle;
				
				dvec2 values[4];
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+radixStride_1];
				values[2] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+2 * radixStride_1];
				values[3] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+3 * radixStride_1];
				
				radix4(values, angle);
				
				temp[0]=values[0];
				temp[2]=values[1];
				temp[4]=values[2];
				temp[6]=values[3];
				
				stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
				angle = double(stageInvocationID) * stageAngle;
				
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+gl_WorkGroupSize.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+gl_WorkGroupSize.x+radixStride_1];
				values[2] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+gl_WorkGroupSize.x+2 * radixStride_1];
				values[3] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+gl_WorkGroupSize.x+3 * radixStride_1];
				
				radix4(values, angle);
				
				temp[1]=values[0];
				temp[3]=values[1];
				temp[5]=values[2];
				temp[7]=values[3];
				break;
			}
			case 8:
			{
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				double angle = double(stageInvocationID) * stageAngle;
				
				dvec2 values[8];
				values[0] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x];
				values[1] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+ radixStride_2];
				values[2] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+2 * radixStride_2];
				values[3] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+3 * radixStride_2];
				values[4] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+4 * radixStride_2];
				values[5] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+5 * radixStride_2];
				values[6] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+6 * radixStride_2];
				values[7] = sdata[fft_dim*gl_LocalInvocationID.y + gl_LocalInvocationID.x+7 * radixStride_2];
				
				radix8(values, angle);
				
				temp[0]=values[0];
				temp[1]=values[1];
				temp[2]=values[2];
				temp[3]=values[3];
				temp[4]=values[4];
				temp[5]=values[5];
				temp[6]=values[6];
				temp[7]=values[7];
				break;
			}
		}
    
        memoryBarrierShared();
        barrier();
		switch(current_radix){
			case 2:
			{
				double stageNormalization = (inverse) ? 0.5 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[0]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[4]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[1]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[5]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+2*gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[2]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+3*gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 2;

				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[3]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[7]*stageNormalization;
				
				stageSize=stageSize*2;
				stageAngle=stageAngle*0.5f;
				break;
			}
			case 4:
			{
				double stageNormalization = (inverse) ? 0.25 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[0]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[2]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*2]=temp[4]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*3]=temp[6]*stageNormalization;
				
				stageInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) & (stageSize - 1u);
				blockInvocationID = (gl_LocalInvocationID.x+gl_WorkGroupSize.x) - stageInvocationID;
				outputIndex = stageInvocationID + blockInvocationID * 4;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[1]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[3]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*2]=temp[5]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*3]=temp[7]*stageNormalization;
				
				stageSize=stageSize*4;
				stageAngle=stageAngle*0.25f;
				break;
			}
			case 8:
			{
				double stageNormalization = (inverse) ? 0.125 : 1.0;
				uint stageInvocationID = (gl_LocalInvocationID.x) & (stageSize - 1u);
				uint blockInvocationID = (gl_LocalInvocationID.x) - stageInvocationID;
				uint outputIndex = stageInvocationID + blockInvocationID * 8;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex]=temp[0]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize]=temp[1]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*2]=temp[2]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*3]=temp[3]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*4]=temp[4]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*5]=temp[5]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*6]=temp[6]*stageNormalization;
				sdata[fft_dim*gl_LocalInvocationID.y + outputIndex+stageSize*7]=temp[7]*stageNormalization;

				stageSize=stageSize*8;
				stageAngle=stageAngle*0.125f;
				break;
			}
		}

        memoryBarrierShared();
        barrier();
    }
	
	if (gl_LocalInvocationID.x==0) 
	{
		temp[0].x=sdata[fft_dim*gl_LocalInvocationID.y].x;
        temp[0].y=0;
        temp[1].x=sdata[fft_dim*gl_LocalInvocationID.y].y;
        temp[1].y=0;
		if (zeropad_1){
			outputs[indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y),  gl_WorkGroupSize.y*2*gl_NumWorkGroups.y)]=temp[0];
			outputs[indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y)+1, gl_WorkGroupSize.y*2*gl_NumWorkGroups.y)]=temp[1];
		} else {
			outputs[indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y),  gl_WorkGroupSize.y*gl_NumWorkGroups.y)]=temp[0];
			outputs[indexOutput(2*(gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y)+1, gl_WorkGroupSize.y*gl_NumWorkGroups.y)]=temp[1];
		}
	}
	//r2c regroup

	for (uint i=0; i<4; i++){
		temp[0].x=0.5*(sdata[fft_dim*gl_LocalInvocationID.y + 1+gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[fft_dim*gl_LocalInvocationID.y + fft_dim-1-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
		temp[0].y=0.5*(sdata[fft_dim*gl_LocalInvocationID.y + 1+gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y-sdata[fft_dim*gl_LocalInvocationID.y + fft_dim-1-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
		temp[1].x=0.5*(sdata[fft_dim*gl_LocalInvocationID.y + 1+gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].y+sdata[fft_dim*gl_LocalInvocationID.y + fft_dim-1-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].y);
		temp[1].y=0.5*(-sdata[fft_dim*gl_LocalInvocationID.y + 1+gl_LocalInvocationID.x+i*gl_WorkGroupSize.x].x+sdata[fft_dim*gl_LocalInvocationID.y + fft_dim-1-(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x)].x);
		outputs[indexOutput(gl_LocalInvocationID.x+i*gl_WorkGroupSize.x, (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y))]=temp[0];
		outputs[indexOutput(gl_LocalInvocationID.x+(4+i)*gl_WorkGroupSize.x, (gl_GlobalInvocationID.y + consts.workGroupShiftY*performWorkGroupShiftY*gl_WorkGroupSize.y))]=temp[1];
	}
	
}
